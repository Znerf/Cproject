
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000878  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000025  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000500  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f4  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000005f8  00000000  00000000  00000f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b1  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000004ce  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
  64:	0c 94 3a 04 	jmp	0x874	; 0x874 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay>:
#include<util/delay.h>

#define F_CPU 16000000UL

void delay(int a)
{
  6c:	af 92       	push	r10
  6e:	bf 92       	push	r11
  70:	cf 92       	push	r12
  72:	df 92       	push	r13
  74:	ef 92       	push	r14
  76:	ff 92       	push	r15
  78:	0f 93       	push	r16
  7a:	1f 93       	push	r17

	_delay_ms(a);
  7c:	aa 27       	eor	r26, r26
  7e:	97 fd       	sbrc	r25, 7
  80:	a0 95       	com	r26
  82:	ba 2f       	mov	r27, r26
  84:	bc 01       	movw	r22, r24
  86:	cd 01       	movw	r24, r26
  88:	0e 94 23 03 	call	0x646	; 0x646 <__floatsisf>
  8c:	5b 01       	movw	r10, r22
  8e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	4a ef       	ldi	r20, 0xFA	; 250
  96:	54 e4       	ldi	r21, 0x44	; 68
  98:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
  9c:	7b 01       	movw	r14, r22
  9e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	40 e8       	ldi	r20, 0x80	; 128
  a6:	5f e3       	ldi	r21, 0x3F	; 63
  a8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
  ac:	88 23       	and	r24, r24
  ae:	1c f4       	brge	.+6      	; 0xb6 <delay+0x4a>
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	24 c0       	rjmp	.+72     	; 0xfe <delay+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
  b6:	c8 01       	movw	r24, r16
  b8:	b7 01       	movw	r22, r14
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	3f ef       	ldi	r19, 0xFF	; 255
  be:	4f e7       	ldi	r20, 0x7F	; 127
  c0:	57 e4       	ldi	r21, 0x47	; 71
  c2:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
  c6:	18 16       	cp	r1, r24
  c8:	b4 f4       	brge	.+44     	; 0xf6 <delay+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  ca:	c6 01       	movw	r24, r12
  cc:	b5 01       	movw	r22, r10
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	40 e2       	ldi	r20, 0x20	; 32
  d4:	51 e4       	ldi	r21, 0x41	; 65
  d6:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
  da:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  de:	88 ec       	ldi	r24, 0xC8	; 200
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	05 c0       	rjmp	.+10     	; 0xee <delay+0x82>
  e4:	fc 01       	movw	r30, r24
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <delay+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	61 50       	subi	r22, 0x01	; 1
  ec:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	61 15       	cp	r22, r1
  f0:	71 05       	cpc	r23, r1
  f2:	c1 f7       	brne	.-16     	; 0xe4 <delay+0x78>
  f4:	07 c0       	rjmp	.+14     	; 0x104 <delay+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  f6:	c8 01       	movw	r24, r16
  f8:	b7 01       	movw	r22, r14
  fa:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
  fe:	cb 01       	movw	r24, r22
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <delay+0x94>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 104:	c8 01       	movw	r24, r16
 106:	b7 01       	movw	r22, r14
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e8       	ldi	r20, 0x80	; 128
 10e:	5f e3       	ldi	r21, 0x3F	; 63
 110:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
 114:	88 23       	and	r24, r24
 116:	1c f4       	brge	.+6      	; 0x11e <delay+0xb2>
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	24 c0       	rjmp	.+72     	; 0x166 <delay+0xfa>
		__ticks = 1;
	else if (__tmp > 65535)
 11e:	c8 01       	movw	r24, r16
 120:	b7 01       	movw	r22, r14
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	3f ef       	ldi	r19, 0xFF	; 255
 126:	4f e7       	ldi	r20, 0x7F	; 127
 128:	57 e4       	ldi	r21, 0x47	; 71
 12a:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
 12e:	18 16       	cp	r1, r24
 130:	b4 f4       	brge	.+44     	; 0x15e <delay+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 132:	c6 01       	movw	r24, r12
 134:	b5 01       	movw	r22, r10
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e2       	ldi	r20, 0x20	; 32
 13c:	51 e4       	ldi	r21, 0x41	; 65
 13e:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 142:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 146:	88 ec       	ldi	r24, 0xC8	; 200
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	05 c0       	rjmp	.+10     	; 0x156 <delay+0xea>
 14c:	fc 01       	movw	r30, r24
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <delay+0xe2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 152:	61 50       	subi	r22, 0x01	; 1
 154:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 156:	61 15       	cp	r22, r1
 158:	71 05       	cpc	r23, r1
 15a:	c1 f7       	brne	.-16     	; 0x14c <delay+0xe0>
 15c:	07 c0       	rjmp	.+14     	; 0x16c <delay+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 15e:	c8 01       	movw	r24, r16
 160:	b7 01       	movw	r22, r14
 162:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 166:	cb 01       	movw	r24, r22
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <delay+0xfc>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 16c:	c8 01       	movw	r24, r16
 16e:	b7 01       	movw	r22, r14
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 e8       	ldi	r20, 0x80	; 128
 176:	5f e3       	ldi	r21, 0x3F	; 63
 178:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
 17c:	88 23       	and	r24, r24
 17e:	1c f4       	brge	.+6      	; 0x186 <delay+0x11a>
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	24 c0       	rjmp	.+72     	; 0x1ce <delay+0x162>
		__ticks = 1;
	else if (__tmp > 65535)
 186:	c8 01       	movw	r24, r16
 188:	b7 01       	movw	r22, r14
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	3f ef       	ldi	r19, 0xFF	; 255
 18e:	4f e7       	ldi	r20, 0x7F	; 127
 190:	57 e4       	ldi	r21, 0x47	; 71
 192:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
 196:	18 16       	cp	r1, r24
 198:	b4 f4       	brge	.+44     	; 0x1c6 <delay+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 19a:	c6 01       	movw	r24, r12
 19c:	b5 01       	movw	r22, r10
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e2       	ldi	r20, 0x20	; 32
 1a4:	51 e4       	ldi	r21, 0x41	; 65
 1a6:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 1aa:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 1ae:	88 ec       	ldi	r24, 0xC8	; 200
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <delay+0x152>
 1b4:	fc 01       	movw	r30, r24
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <delay+0x14a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ba:	61 50       	subi	r22, 0x01	; 1
 1bc:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1be:	61 15       	cp	r22, r1
 1c0:	71 05       	cpc	r23, r1
 1c2:	c1 f7       	brne	.-16     	; 0x1b4 <delay+0x148>
 1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <delay+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c6:	c8 01       	movw	r24, r16
 1c8:	b7 01       	movw	r22, r14
 1ca:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 1ce:	cb 01       	movw	r24, r22
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <delay+0x164>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1d4:	c8 01       	movw	r24, r16
 1d6:	b7 01       	movw	r22, r14
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 e8       	ldi	r20, 0x80	; 128
 1de:	5f e3       	ldi	r21, 0x3F	; 63
 1e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
 1e4:	88 23       	and	r24, r24
 1e6:	1c f4       	brge	.+6      	; 0x1ee <delay+0x182>
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	24 c0       	rjmp	.+72     	; 0x236 <delay+0x1ca>
		__ticks = 1;
	else if (__tmp > 65535)
 1ee:	c8 01       	movw	r24, r16
 1f0:	b7 01       	movw	r22, r14
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	3f ef       	ldi	r19, 0xFF	; 255
 1f6:	4f e7       	ldi	r20, 0x7F	; 127
 1f8:	57 e4       	ldi	r21, 0x47	; 71
 1fa:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
 1fe:	18 16       	cp	r1, r24
 200:	b4 f4       	brge	.+44     	; 0x22e <delay+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 202:	c6 01       	movw	r24, r12
 204:	b5 01       	movw	r22, r10
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e2       	ldi	r20, 0x20	; 32
 20c:	51 e4       	ldi	r21, 0x41	; 65
 20e:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 212:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 216:	88 ec       	ldi	r24, 0xC8	; 200
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	05 c0       	rjmp	.+10     	; 0x226 <delay+0x1ba>
 21c:	fc 01       	movw	r30, r24
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <delay+0x1b2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 222:	61 50       	subi	r22, 0x01	; 1
 224:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 226:	61 15       	cp	r22, r1
 228:	71 05       	cpc	r23, r1
 22a:	c1 f7       	brne	.-16     	; 0x21c <delay+0x1b0>
 22c:	07 c0       	rjmp	.+14     	; 0x23c <delay+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 22e:	c8 01       	movw	r24, r16
 230:	b7 01       	movw	r22, r14
 232:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 236:	cb 01       	movw	r24, r22
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <delay+0x1cc>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 23c:	c8 01       	movw	r24, r16
 23e:	b7 01       	movw	r22, r14
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e8       	ldi	r20, 0x80	; 128
 246:	5f e3       	ldi	r21, 0x3F	; 63
 248:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
 24c:	88 23       	and	r24, r24
 24e:	1c f4       	brge	.+6      	; 0x256 <delay+0x1ea>
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	24 c0       	rjmp	.+72     	; 0x29e <delay+0x232>
		__ticks = 1;
	else if (__tmp > 65535)
 256:	c8 01       	movw	r24, r16
 258:	b7 01       	movw	r22, r14
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	3f ef       	ldi	r19, 0xFF	; 255
 25e:	4f e7       	ldi	r20, 0x7F	; 127
 260:	57 e4       	ldi	r21, 0x47	; 71
 262:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
 266:	18 16       	cp	r1, r24
 268:	b4 f4       	brge	.+44     	; 0x296 <delay+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 26a:	c6 01       	movw	r24, r12
 26c:	b5 01       	movw	r22, r10
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	40 e2       	ldi	r20, 0x20	; 32
 274:	51 e4       	ldi	r21, 0x41	; 65
 276:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 27a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 27e:	88 ec       	ldi	r24, 0xC8	; 200
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	05 c0       	rjmp	.+10     	; 0x28e <delay+0x222>
 284:	fc 01       	movw	r30, r24
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <delay+0x21a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28a:	61 50       	subi	r22, 0x01	; 1
 28c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28e:	61 15       	cp	r22, r1
 290:	71 05       	cpc	r23, r1
 292:	c1 f7       	brne	.-16     	; 0x284 <delay+0x218>
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <delay+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 296:	c8 01       	movw	r24, r16
 298:	b7 01       	movw	r22, r14
 29a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 29e:	cb 01       	movw	r24, r22
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <delay+0x234>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 2a4:	c8 01       	movw	r24, r16
 2a6:	b7 01       	movw	r22, r14
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e8       	ldi	r20, 0x80	; 128
 2ae:	5f e3       	ldi	r21, 0x3F	; 63
 2b0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
 2b4:	88 23       	and	r24, r24
 2b6:	1c f4       	brge	.+6      	; 0x2be <delay+0x252>
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	24 c0       	rjmp	.+72     	; 0x306 <delay+0x29a>
		__ticks = 1;
	else if (__tmp > 65535)
 2be:	c8 01       	movw	r24, r16
 2c0:	b7 01       	movw	r22, r14
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	3f ef       	ldi	r19, 0xFF	; 255
 2c6:	4f e7       	ldi	r20, 0x7F	; 127
 2c8:	57 e4       	ldi	r21, 0x47	; 71
 2ca:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
 2ce:	18 16       	cp	r1, r24
 2d0:	b4 f4       	brge	.+44     	; 0x2fe <delay+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2d2:	c6 01       	movw	r24, r12
 2d4:	b5 01       	movw	r22, r10
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 e2       	ldi	r20, 0x20	; 32
 2dc:	51 e4       	ldi	r21, 0x41	; 65
 2de:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 2e2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 2e6:	88 ec       	ldi	r24, 0xC8	; 200
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <delay+0x28a>
 2ec:	fc 01       	movw	r30, r24
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <delay+0x282>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f2:	61 50       	subi	r22, 0x01	; 1
 2f4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f6:	61 15       	cp	r22, r1
 2f8:	71 05       	cpc	r23, r1
 2fa:	c1 f7       	brne	.-16     	; 0x2ec <delay+0x280>
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <delay+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2fe:	c8 01       	movw	r24, r16
 300:	b7 01       	movw	r22, r14
 302:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 306:	cb 01       	movw	r24, r22
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <delay+0x29c>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 30c:	c8 01       	movw	r24, r16
 30e:	b7 01       	movw	r22, r14
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 e8       	ldi	r20, 0x80	; 128
 316:	5f e3       	ldi	r21, 0x3F	; 63
 318:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
 31c:	88 23       	and	r24, r24
 31e:	1c f4       	brge	.+6      	; 0x326 <delay+0x2ba>
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	24 c0       	rjmp	.+72     	; 0x36e <delay+0x302>
		__ticks = 1;
	else if (__tmp > 65535)
 326:	c8 01       	movw	r24, r16
 328:	b7 01       	movw	r22, r14
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	3f ef       	ldi	r19, 0xFF	; 255
 32e:	4f e7       	ldi	r20, 0x7F	; 127
 330:	57 e4       	ldi	r21, 0x47	; 71
 332:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
 336:	18 16       	cp	r1, r24
 338:	b4 f4       	brge	.+44     	; 0x366 <delay+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 33a:	c6 01       	movw	r24, r12
 33c:	b5 01       	movw	r22, r10
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	40 e2       	ldi	r20, 0x20	; 32
 344:	51 e4       	ldi	r21, 0x41	; 65
 346:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 34a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 34e:	88 ec       	ldi	r24, 0xC8	; 200
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	05 c0       	rjmp	.+10     	; 0x35e <delay+0x2f2>
 354:	fc 01       	movw	r30, r24
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <delay+0x2ea>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35a:	61 50       	subi	r22, 0x01	; 1
 35c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 35e:	61 15       	cp	r22, r1
 360:	71 05       	cpc	r23, r1
 362:	c1 f7       	brne	.-16     	; 0x354 <delay+0x2e8>
 364:	07 c0       	rjmp	.+14     	; 0x374 <delay+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 366:	c8 01       	movw	r24, r16
 368:	b7 01       	movw	r22, r14
 36a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 36e:	cb 01       	movw	r24, r22
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <delay+0x304>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 374:	c8 01       	movw	r24, r16
 376:	b7 01       	movw	r22, r14
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e8       	ldi	r20, 0x80	; 128
 37e:	5f e3       	ldi	r21, 0x3F	; 63
 380:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
 384:	88 23       	and	r24, r24
 386:	1c f4       	brge	.+6      	; 0x38e <delay+0x322>
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	24 c0       	rjmp	.+72     	; 0x3d6 <delay+0x36a>
		__ticks = 1;
	else if (__tmp > 65535)
 38e:	c8 01       	movw	r24, r16
 390:	b7 01       	movw	r22, r14
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	3f ef       	ldi	r19, 0xFF	; 255
 396:	4f e7       	ldi	r20, 0x7F	; 127
 398:	57 e4       	ldi	r21, 0x47	; 71
 39a:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
 39e:	18 16       	cp	r1, r24
 3a0:	b4 f4       	brge	.+44     	; 0x3ce <delay+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3a2:	c6 01       	movw	r24, r12
 3a4:	b5 01       	movw	r22, r10
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	40 e2       	ldi	r20, 0x20	; 32
 3ac:	51 e4       	ldi	r21, 0x41	; 65
 3ae:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 3b2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 3b6:	88 ec       	ldi	r24, 0xC8	; 200
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <delay+0x35a>
 3bc:	fc 01       	movw	r30, r24
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <delay+0x352>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c2:	61 50       	subi	r22, 0x01	; 1
 3c4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c6:	61 15       	cp	r22, r1
 3c8:	71 05       	cpc	r23, r1
 3ca:	c1 f7       	brne	.-16     	; 0x3bc <delay+0x350>
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <delay+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3ce:	c8 01       	movw	r24, r16
 3d0:	b7 01       	movw	r22, r14
 3d2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 3d6:	cb 01       	movw	r24, r22
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <delay+0x36c>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 3dc:	c8 01       	movw	r24, r16
 3de:	b7 01       	movw	r22, r14
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	40 e8       	ldi	r20, 0x80	; 128
 3e6:	5f e3       	ldi	r21, 0x3F	; 63
 3e8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
 3ec:	88 23       	and	r24, r24
 3ee:	1c f4       	brge	.+6      	; 0x3f6 <delay+0x38a>
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	24 c0       	rjmp	.+72     	; 0x43e <delay+0x3d2>
		__ticks = 1;
	else if (__tmp > 65535)
 3f6:	c8 01       	movw	r24, r16
 3f8:	b7 01       	movw	r22, r14
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	3f ef       	ldi	r19, 0xFF	; 255
 3fe:	4f e7       	ldi	r20, 0x7F	; 127
 400:	57 e4       	ldi	r21, 0x47	; 71
 402:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
 406:	18 16       	cp	r1, r24
 408:	b4 f4       	brge	.+44     	; 0x436 <delay+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 40a:	c6 01       	movw	r24, r12
 40c:	b5 01       	movw	r22, r10
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 e2       	ldi	r20, 0x20	; 32
 414:	51 e4       	ldi	r21, 0x41	; 65
 416:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 41a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 41e:	88 ec       	ldi	r24, 0xC8	; 200
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	05 c0       	rjmp	.+10     	; 0x42e <delay+0x3c2>
 424:	fc 01       	movw	r30, r24
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <delay+0x3ba>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 42a:	61 50       	subi	r22, 0x01	; 1
 42c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 42e:	61 15       	cp	r22, r1
 430:	71 05       	cpc	r23, r1
 432:	c1 f7       	brne	.-16     	; 0x424 <delay+0x3b8>
 434:	07 c0       	rjmp	.+14     	; 0x444 <delay+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 436:	c8 01       	movw	r24, r16
 438:	b7 01       	movw	r22, r14
 43a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 43e:	cb 01       	movw	r24, r22
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <delay+0x3d4>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 444:	c8 01       	movw	r24, r16
 446:	b7 01       	movw	r22, r14
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	40 e8       	ldi	r20, 0x80	; 128
 44e:	5f e3       	ldi	r21, 0x3F	; 63
 450:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__cmpsf2>
 454:	88 23       	and	r24, r24
 456:	1c f4       	brge	.+6      	; 0x45e <delay+0x3f2>
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	24 c0       	rjmp	.+72     	; 0x4a6 <delay+0x43a>
		__ticks = 1;
	else if (__tmp > 65535)
 45e:	c8 01       	movw	r24, r16
 460:	b7 01       	movw	r22, r14
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	3f ef       	ldi	r19, 0xFF	; 255
 466:	4f e7       	ldi	r20, 0x7F	; 127
 468:	57 e4       	ldi	r21, 0x47	; 71
 46a:	0e 94 ab 03 	call	0x756	; 0x756 <__gesf2>
 46e:	18 16       	cp	r1, r24
 470:	b4 f4       	brge	.+44     	; 0x49e <delay+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 472:	c6 01       	movw	r24, r12
 474:	b5 01       	movw	r22, r10
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	40 e2       	ldi	r20, 0x20	; 32
 47c:	51 e4       	ldi	r21, 0x41	; 65
 47e:	0e 94 af 03 	call	0x75e	; 0x75e <__mulsf3>
 482:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 486:	88 ec       	ldi	r24, 0xC8	; 200
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	05 c0       	rjmp	.+10     	; 0x496 <delay+0x42a>
 48c:	fc 01       	movw	r30, r24
 48e:	31 97       	sbiw	r30, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <delay+0x422>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 492:	61 50       	subi	r22, 0x01	; 1
 494:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 496:	61 15       	cp	r22, r1
 498:	71 05       	cpc	r23, r1
 49a:	c1 f7       	brne	.-16     	; 0x48c <delay+0x420>
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <delay+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 49e:	c8 01       	movw	r24, r16
 4a0:	b7 01       	movw	r22, r14
 4a2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fixunssfsi>
 4a6:	cb 01       	movw	r24, r22
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <delay+0x43c>
	_delay_ms(a);
	_delay_ms(a);
	_delay_ms(a);
	_delay_ms(a);

}
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	08 95       	ret

000004be <main>:
int main()
{
 4be:	5f 92       	push	r5
 4c0:	6f 92       	push	r6
 4c2:	7f 92       	push	r7
 4c4:	8f 92       	push	r8
 4c6:	9f 92       	push	r9
 4c8:	af 92       	push	r10
 4ca:	bf 92       	push	r11
 4cc:	cf 92       	push	r12
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
	DDRC=0xFF;
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	84 bb       	out	0x14, r24	; 20
	DDRD=0b00011111;
 4dc:	8f e1       	ldi	r24, 0x1F	; 31
 4de:	81 bb       	out	0x11, r24	; 17
	DDRB=0b00011111;
 4e0:	87 bb       	out	0x17, r24	; 23
	//DDRC=0b11111111;
	
	while(1)
	{
		PORTB =	0b00011111;
 4e2:	1f e1       	ldi	r17, 0x1F	; 31
		PORTC =	0b11111111;
 4e4:	cc 24       	eor	r12, r12
 4e6:	ca 94       	dec	r12
		PORTD =	0b00011111;
		delay(750);
		PORTB =	0b00011110;
 4e8:	fe e1       	ldi	r31, 0x1E	; 30
 4ea:	df 2e       	mov	r13, r31
		delay(750);
		PORTB =	0b00011100;
 4ec:	ec e1       	ldi	r30, 0x1C	; 28
 4ee:	ee 2e       	mov	r14, r30
		delay(750);
		PORTB =	0b00011000;
 4f0:	78 e1       	ldi	r23, 0x18	; 24
 4f2:	f7 2e       	mov	r15, r23
		delay(750);
		PORTB =	0b00010000;
 4f4:	00 e1       	ldi	r16, 0x10	; 16
		PORTB =	0b00000000;
		delay(30);
		
		PORTC =	0b11111111;
		delay(750);
		PORTC =	0b11111110;
 4f6:	6e ef       	ldi	r22, 0xFE	; 254
 4f8:	56 2e       	mov	r5, r22
		delay(750);
		PORTC =	0b11111100;
 4fa:	5c ef       	ldi	r21, 0xFC	; 252
 4fc:	65 2e       	mov	r6, r21
		delay(750);
		PORTC =	0b11111000;
 4fe:	48 ef       	ldi	r20, 0xF8	; 248
 500:	74 2e       	mov	r7, r20
		delay(750);
		PORTC =	0b11110000;
 502:	30 ef       	ldi	r19, 0xF0	; 240
 504:	83 2e       	mov	r8, r19
		delay(750);
		PORTC =	0b11100000;
 506:	20 ee       	ldi	r18, 0xE0	; 224
 508:	92 2e       	mov	r9, r18
		delay(750);
		PORTC =	0b11000000;
 50a:	90 ec       	ldi	r25, 0xC0	; 192
 50c:	a9 2e       	mov	r10, r25
		delay(750);
		PORTC =	0b10000000;
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	b8 2e       	mov	r11, r24
	DDRB=0b00011111;
	//DDRC=0b11111111;
	
	while(1)
	{
		PORTB =	0b00011111;
 512:	18 bb       	out	0x18, r17	; 24
		PORTC =	0b11111111;
 514:	c5 ba       	out	0x15, r12	; 21
		PORTD =	0b00011111;
 516:	12 bb       	out	0x12, r17	; 18
		delay(750);
 518:	8e ee       	ldi	r24, 0xEE	; 238
 51a:	92 e0       	ldi	r25, 0x02	; 2
 51c:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTB =	0b00011110;
 520:	d8 ba       	out	0x18, r13	; 24
		delay(750);
 522:	8e ee       	ldi	r24, 0xEE	; 238
 524:	92 e0       	ldi	r25, 0x02	; 2
 526:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTB =	0b00011100;
 52a:	e8 ba       	out	0x18, r14	; 24
		delay(750);
 52c:	8e ee       	ldi	r24, 0xEE	; 238
 52e:	92 e0       	ldi	r25, 0x02	; 2
 530:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTB =	0b00011000;
 534:	f8 ba       	out	0x18, r15	; 24
		delay(750);
 536:	8e ee       	ldi	r24, 0xEE	; 238
 538:	92 e0       	ldi	r25, 0x02	; 2
 53a:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTB =	0b00010000;
 53e:	08 bb       	out	0x18, r16	; 24
		delay(750);
 540:	8e ee       	ldi	r24, 0xEE	; 238
 542:	92 e0       	ldi	r25, 0x02	; 2
 544:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTB =	0b00000000;
 548:	18 ba       	out	0x18, r1	; 24
		delay(30);
 54a:	8e e1       	ldi	r24, 0x1E	; 30
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		
		PORTC =	0b11111111;
 552:	c5 ba       	out	0x15, r12	; 21
		delay(750);
 554:	8e ee       	ldi	r24, 0xEE	; 238
 556:	92 e0       	ldi	r25, 0x02	; 2
 558:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTC =	0b11111110;
 55c:	55 ba       	out	0x15, r5	; 21
		delay(750);
 55e:	8e ee       	ldi	r24, 0xEE	; 238
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTC =	0b11111100;
 566:	65 ba       	out	0x15, r6	; 21
		delay(750);
 568:	8e ee       	ldi	r24, 0xEE	; 238
 56a:	92 e0       	ldi	r25, 0x02	; 2
 56c:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTC =	0b11111000;
 570:	75 ba       	out	0x15, r7	; 21
		delay(750);
 572:	8e ee       	ldi	r24, 0xEE	; 238
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTC =	0b11110000;
 57a:	85 ba       	out	0x15, r8	; 21
		delay(750);
 57c:	8e ee       	ldi	r24, 0xEE	; 238
 57e:	92 e0       	ldi	r25, 0x02	; 2
 580:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTC =	0b11100000;
 584:	95 ba       	out	0x15, r9	; 21
		delay(750);
 586:	8e ee       	ldi	r24, 0xEE	; 238
 588:	92 e0       	ldi	r25, 0x02	; 2
 58a:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTC =	0b11000000;
 58e:	a5 ba       	out	0x15, r10	; 21
		delay(750);
 590:	8e ee       	ldi	r24, 0xEE	; 238
 592:	92 e0       	ldi	r25, 0x02	; 2
 594:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTC =	0b10000000;
 598:	b5 ba       	out	0x15, r11	; 21
		delay(750);
 59a:	8e ee       	ldi	r24, 0xEE	; 238
 59c:	92 e0       	ldi	r25, 0x02	; 2
 59e:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTC =	0b00000000;
 5a2:	15 ba       	out	0x15, r1	; 21
		delay(30);
 5a4:	8e e1       	ldi	r24, 0x1E	; 30
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		
		PORTD =	0b00011111;
 5ac:	12 bb       	out	0x12, r17	; 18
		delay(750);
 5ae:	8e ee       	ldi	r24, 0xEE	; 238
 5b0:	92 e0       	ldi	r25, 0x02	; 2
 5b2:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTD =	0b00011110;
 5b6:	d2 ba       	out	0x12, r13	; 18
		delay(750);
 5b8:	8e ee       	ldi	r24, 0xEE	; 238
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTD =	0b00011100;
 5c0:	e2 ba       	out	0x12, r14	; 18
		delay(750);
 5c2:	8e ee       	ldi	r24, 0xEE	; 238
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTD =	0b00011000;
 5ca:	f2 ba       	out	0x12, r15	; 18
		delay(750);
 5cc:	8e ee       	ldi	r24, 0xEE	; 238
 5ce:	92 e0       	ldi	r25, 0x02	; 2
 5d0:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTD =	0b00010000;
 5d4:	02 bb       	out	0x12, r16	; 18
		delay(750);
 5d6:	8e ee       	ldi	r24, 0xEE	; 238
 5d8:	92 e0       	ldi	r25, 0x02	; 2
 5da:	0e 94 36 00 	call	0x6c	; 0x6c <delay>
		PORTD =	0b00000000;
 5de:	12 ba       	out	0x12, r1	; 18
 5e0:	98 cf       	rjmp	.-208    	; 0x512 <main+0x54>

000005e2 <__cmpsf2>:
 5e2:	6c d0       	rcall	.+216    	; 0x6bc <__fp_cmp>
 5e4:	08 f4       	brcc	.+2      	; 0x5e8 <__cmpsf2+0x6>
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	08 95       	ret

000005ea <__fixunssfsi>:
 5ea:	94 d0       	rcall	.+296    	; 0x714 <__fp_splitA>
 5ec:	88 f0       	brcs	.+34     	; 0x610 <__fixunssfsi+0x26>
 5ee:	9f 57       	subi	r25, 0x7F	; 127
 5f0:	90 f0       	brcs	.+36     	; 0x616 <__fixunssfsi+0x2c>
 5f2:	b9 2f       	mov	r27, r25
 5f4:	99 27       	eor	r25, r25
 5f6:	b7 51       	subi	r27, 0x17	; 23
 5f8:	a0 f0       	brcs	.+40     	; 0x622 <__fixunssfsi+0x38>
 5fa:	d1 f0       	breq	.+52     	; 0x630 <__fixunssfsi+0x46>
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	1a f0       	brmi	.+6      	; 0x60c <__fixunssfsi+0x22>
 606:	ba 95       	dec	r27
 608:	c9 f7       	brne	.-14     	; 0x5fc <__fixunssfsi+0x12>
 60a:	12 c0       	rjmp	.+36     	; 0x630 <__fixunssfsi+0x46>
 60c:	b1 30       	cpi	r27, 0x01	; 1
 60e:	81 f0       	breq	.+32     	; 0x630 <__fixunssfsi+0x46>
 610:	9b d0       	rcall	.+310    	; 0x748 <__fp_zero>
 612:	b1 e0       	ldi	r27, 0x01	; 1
 614:	08 95       	ret
 616:	98 c0       	rjmp	.+304    	; 0x748 <__fp_zero>
 618:	67 2f       	mov	r22, r23
 61a:	78 2f       	mov	r23, r24
 61c:	88 27       	eor	r24, r24
 61e:	b8 5f       	subi	r27, 0xF8	; 248
 620:	39 f0       	breq	.+14     	; 0x630 <__fixunssfsi+0x46>
 622:	b9 3f       	cpi	r27, 0xF9	; 249
 624:	cc f3       	brlt	.-14     	; 0x618 <__fixunssfsi+0x2e>
 626:	86 95       	lsr	r24
 628:	77 95       	ror	r23
 62a:	67 95       	ror	r22
 62c:	b3 95       	inc	r27
 62e:	d9 f7       	brne	.-10     	; 0x626 <__fixunssfsi+0x3c>
 630:	3e f4       	brtc	.+14     	; 0x640 <__fixunssfsi+0x56>
 632:	90 95       	com	r25
 634:	80 95       	com	r24
 636:	70 95       	com	r23
 638:	61 95       	neg	r22
 63a:	7f 4f       	sbci	r23, 0xFF	; 255
 63c:	8f 4f       	sbci	r24, 0xFF	; 255
 63e:	9f 4f       	sbci	r25, 0xFF	; 255
 640:	08 95       	ret

00000642 <__floatunsisf>:
 642:	e8 94       	clt
 644:	09 c0       	rjmp	.+18     	; 0x658 <__floatsisf+0x12>

00000646 <__floatsisf>:
 646:	97 fb       	bst	r25, 7
 648:	3e f4       	brtc	.+14     	; 0x658 <__floatsisf+0x12>
 64a:	90 95       	com	r25
 64c:	80 95       	com	r24
 64e:	70 95       	com	r23
 650:	61 95       	neg	r22
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	99 23       	and	r25, r25
 65a:	a9 f0       	breq	.+42     	; 0x686 <__floatsisf+0x40>
 65c:	f9 2f       	mov	r31, r25
 65e:	96 e9       	ldi	r25, 0x96	; 150
 660:	bb 27       	eor	r27, r27
 662:	93 95       	inc	r25
 664:	f6 95       	lsr	r31
 666:	87 95       	ror	r24
 668:	77 95       	ror	r23
 66a:	67 95       	ror	r22
 66c:	b7 95       	ror	r27
 66e:	f1 11       	cpse	r31, r1
 670:	f8 cf       	rjmp	.-16     	; 0x662 <__floatsisf+0x1c>
 672:	fa f4       	brpl	.+62     	; 0x6b2 <__floatsisf+0x6c>
 674:	bb 0f       	add	r27, r27
 676:	11 f4       	brne	.+4      	; 0x67c <__floatsisf+0x36>
 678:	60 ff       	sbrs	r22, 0
 67a:	1b c0       	rjmp	.+54     	; 0x6b2 <__floatsisf+0x6c>
 67c:	6f 5f       	subi	r22, 0xFF	; 255
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	8f 4f       	sbci	r24, 0xFF	; 255
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	16 c0       	rjmp	.+44     	; 0x6b2 <__floatsisf+0x6c>
 686:	88 23       	and	r24, r24
 688:	11 f0       	breq	.+4      	; 0x68e <__floatsisf+0x48>
 68a:	96 e9       	ldi	r25, 0x96	; 150
 68c:	11 c0       	rjmp	.+34     	; 0x6b0 <__floatsisf+0x6a>
 68e:	77 23       	and	r23, r23
 690:	21 f0       	breq	.+8      	; 0x69a <__floatsisf+0x54>
 692:	9e e8       	ldi	r25, 0x8E	; 142
 694:	87 2f       	mov	r24, r23
 696:	76 2f       	mov	r23, r22
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <__floatsisf+0x5e>
 69a:	66 23       	and	r22, r22
 69c:	71 f0       	breq	.+28     	; 0x6ba <__floatsisf+0x74>
 69e:	96 e8       	ldi	r25, 0x86	; 134
 6a0:	86 2f       	mov	r24, r22
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	2a f0       	brmi	.+10     	; 0x6b2 <__floatsisf+0x6c>
 6a8:	9a 95       	dec	r25
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	da f7       	brpl	.-10     	; 0x6a8 <__floatsisf+0x62>
 6b2:	88 0f       	add	r24, r24
 6b4:	96 95       	lsr	r25
 6b6:	87 95       	ror	r24
 6b8:	97 f9       	bld	r25, 7
 6ba:	08 95       	ret

000006bc <__fp_cmp>:
 6bc:	99 0f       	add	r25, r25
 6be:	00 08       	sbc	r0, r0
 6c0:	55 0f       	add	r21, r21
 6c2:	aa 0b       	sbc	r26, r26
 6c4:	e0 e8       	ldi	r30, 0x80	; 128
 6c6:	fe ef       	ldi	r31, 0xFE	; 254
 6c8:	16 16       	cp	r1, r22
 6ca:	17 06       	cpc	r1, r23
 6cc:	e8 07       	cpc	r30, r24
 6ce:	f9 07       	cpc	r31, r25
 6d0:	c0 f0       	brcs	.+48     	; 0x702 <__fp_cmp+0x46>
 6d2:	12 16       	cp	r1, r18
 6d4:	13 06       	cpc	r1, r19
 6d6:	e4 07       	cpc	r30, r20
 6d8:	f5 07       	cpc	r31, r21
 6da:	98 f0       	brcs	.+38     	; 0x702 <__fp_cmp+0x46>
 6dc:	62 1b       	sub	r22, r18
 6de:	73 0b       	sbc	r23, r19
 6e0:	84 0b       	sbc	r24, r20
 6e2:	95 0b       	sbc	r25, r21
 6e4:	39 f4       	brne	.+14     	; 0x6f4 <__fp_cmp+0x38>
 6e6:	0a 26       	eor	r0, r26
 6e8:	61 f0       	breq	.+24     	; 0x702 <__fp_cmp+0x46>
 6ea:	23 2b       	or	r18, r19
 6ec:	24 2b       	or	r18, r20
 6ee:	25 2b       	or	r18, r21
 6f0:	21 f4       	brne	.+8      	; 0x6fa <__fp_cmp+0x3e>
 6f2:	08 95       	ret
 6f4:	0a 26       	eor	r0, r26
 6f6:	09 f4       	brne	.+2      	; 0x6fa <__fp_cmp+0x3e>
 6f8:	a1 40       	sbci	r26, 0x01	; 1
 6fa:	a6 95       	lsr	r26
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	81 1d       	adc	r24, r1
 700:	81 1d       	adc	r24, r1
 702:	08 95       	ret

00000704 <__fp_split3>:
 704:	57 fd       	sbrc	r21, 7
 706:	90 58       	subi	r25, 0x80	; 128
 708:	44 0f       	add	r20, r20
 70a:	55 1f       	adc	r21, r21
 70c:	59 f0       	breq	.+22     	; 0x724 <__fp_splitA+0x10>
 70e:	5f 3f       	cpi	r21, 0xFF	; 255
 710:	71 f0       	breq	.+28     	; 0x72e <__fp_splitA+0x1a>
 712:	47 95       	ror	r20

00000714 <__fp_splitA>:
 714:	88 0f       	add	r24, r24
 716:	97 fb       	bst	r25, 7
 718:	99 1f       	adc	r25, r25
 71a:	61 f0       	breq	.+24     	; 0x734 <__fp_splitA+0x20>
 71c:	9f 3f       	cpi	r25, 0xFF	; 255
 71e:	79 f0       	breq	.+30     	; 0x73e <__fp_splitA+0x2a>
 720:	87 95       	ror	r24
 722:	08 95       	ret
 724:	12 16       	cp	r1, r18
 726:	13 06       	cpc	r1, r19
 728:	14 06       	cpc	r1, r20
 72a:	55 1f       	adc	r21, r21
 72c:	f2 cf       	rjmp	.-28     	; 0x712 <__fp_split3+0xe>
 72e:	46 95       	lsr	r20
 730:	f1 df       	rcall	.-30     	; 0x714 <__fp_splitA>
 732:	08 c0       	rjmp	.+16     	; 0x744 <__fp_splitA+0x30>
 734:	16 16       	cp	r1, r22
 736:	17 06       	cpc	r1, r23
 738:	18 06       	cpc	r1, r24
 73a:	99 1f       	adc	r25, r25
 73c:	f1 cf       	rjmp	.-30     	; 0x720 <__fp_splitA+0xc>
 73e:	86 95       	lsr	r24
 740:	71 05       	cpc	r23, r1
 742:	61 05       	cpc	r22, r1
 744:	08 94       	sec
 746:	08 95       	ret

00000748 <__fp_zero>:
 748:	e8 94       	clt

0000074a <__fp_szero>:
 74a:	bb 27       	eor	r27, r27
 74c:	66 27       	eor	r22, r22
 74e:	77 27       	eor	r23, r23
 750:	cb 01       	movw	r24, r22
 752:	97 f9       	bld	r25, 7
 754:	08 95       	ret

00000756 <__gesf2>:
 756:	b2 df       	rcall	.-156    	; 0x6bc <__fp_cmp>
 758:	08 f4       	brcc	.+2      	; 0x75c <__gesf2+0x6>
 75a:	8f ef       	ldi	r24, 0xFF	; 255
 75c:	08 95       	ret

0000075e <__mulsf3>:
 75e:	0b d0       	rcall	.+22     	; 0x776 <__mulsf3x>
 760:	78 c0       	rjmp	.+240    	; 0x852 <__fp_round>
 762:	69 d0       	rcall	.+210    	; 0x836 <__fp_pscA>
 764:	28 f0       	brcs	.+10     	; 0x770 <__mulsf3+0x12>
 766:	6e d0       	rcall	.+220    	; 0x844 <__fp_pscB>
 768:	18 f0       	brcs	.+6      	; 0x770 <__mulsf3+0x12>
 76a:	95 23       	and	r25, r21
 76c:	09 f0       	breq	.+2      	; 0x770 <__mulsf3+0x12>
 76e:	5a c0       	rjmp	.+180    	; 0x824 <__fp_inf>
 770:	5f c0       	rjmp	.+190    	; 0x830 <__fp_nan>
 772:	11 24       	eor	r1, r1
 774:	ea cf       	rjmp	.-44     	; 0x74a <__fp_szero>

00000776 <__mulsf3x>:
 776:	c6 df       	rcall	.-116    	; 0x704 <__fp_split3>
 778:	a0 f3       	brcs	.-24     	; 0x762 <__mulsf3+0x4>

0000077a <__mulsf3_pse>:
 77a:	95 9f       	mul	r25, r21
 77c:	d1 f3       	breq	.-12     	; 0x772 <__mulsf3+0x14>
 77e:	95 0f       	add	r25, r21
 780:	50 e0       	ldi	r21, 0x00	; 0
 782:	55 1f       	adc	r21, r21
 784:	62 9f       	mul	r22, r18
 786:	f0 01       	movw	r30, r0
 788:	72 9f       	mul	r23, r18
 78a:	bb 27       	eor	r27, r27
 78c:	f0 0d       	add	r31, r0
 78e:	b1 1d       	adc	r27, r1
 790:	63 9f       	mul	r22, r19
 792:	aa 27       	eor	r26, r26
 794:	f0 0d       	add	r31, r0
 796:	b1 1d       	adc	r27, r1
 798:	aa 1f       	adc	r26, r26
 79a:	64 9f       	mul	r22, r20
 79c:	66 27       	eor	r22, r22
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	66 1f       	adc	r22, r22
 7a4:	82 9f       	mul	r24, r18
 7a6:	22 27       	eor	r18, r18
 7a8:	b0 0d       	add	r27, r0
 7aa:	a1 1d       	adc	r26, r1
 7ac:	62 1f       	adc	r22, r18
 7ae:	73 9f       	mul	r23, r19
 7b0:	b0 0d       	add	r27, r0
 7b2:	a1 1d       	adc	r26, r1
 7b4:	62 1f       	adc	r22, r18
 7b6:	83 9f       	mul	r24, r19
 7b8:	a0 0d       	add	r26, r0
 7ba:	61 1d       	adc	r22, r1
 7bc:	22 1f       	adc	r18, r18
 7be:	74 9f       	mul	r23, r20
 7c0:	33 27       	eor	r19, r19
 7c2:	a0 0d       	add	r26, r0
 7c4:	61 1d       	adc	r22, r1
 7c6:	23 1f       	adc	r18, r19
 7c8:	84 9f       	mul	r24, r20
 7ca:	60 0d       	add	r22, r0
 7cc:	21 1d       	adc	r18, r1
 7ce:	82 2f       	mov	r24, r18
 7d0:	76 2f       	mov	r23, r22
 7d2:	6a 2f       	mov	r22, r26
 7d4:	11 24       	eor	r1, r1
 7d6:	9f 57       	subi	r25, 0x7F	; 127
 7d8:	50 40       	sbci	r21, 0x00	; 0
 7da:	8a f0       	brmi	.+34     	; 0x7fe <__mulsf3_pse+0x84>
 7dc:	e1 f0       	breq	.+56     	; 0x816 <__mulsf3_pse+0x9c>
 7de:	88 23       	and	r24, r24
 7e0:	4a f0       	brmi	.+18     	; 0x7f4 <__mulsf3_pse+0x7a>
 7e2:	ee 0f       	add	r30, r30
 7e4:	ff 1f       	adc	r31, r31
 7e6:	bb 1f       	adc	r27, r27
 7e8:	66 1f       	adc	r22, r22
 7ea:	77 1f       	adc	r23, r23
 7ec:	88 1f       	adc	r24, r24
 7ee:	91 50       	subi	r25, 0x01	; 1
 7f0:	50 40       	sbci	r21, 0x00	; 0
 7f2:	a9 f7       	brne	.-22     	; 0x7de <__mulsf3_pse+0x64>
 7f4:	9e 3f       	cpi	r25, 0xFE	; 254
 7f6:	51 05       	cpc	r21, r1
 7f8:	70 f0       	brcs	.+28     	; 0x816 <__mulsf3_pse+0x9c>
 7fa:	14 c0       	rjmp	.+40     	; 0x824 <__fp_inf>
 7fc:	a6 cf       	rjmp	.-180    	; 0x74a <__fp_szero>
 7fe:	5f 3f       	cpi	r21, 0xFF	; 255
 800:	ec f3       	brlt	.-6      	; 0x7fc <__mulsf3_pse+0x82>
 802:	98 3e       	cpi	r25, 0xE8	; 232
 804:	dc f3       	brlt	.-10     	; 0x7fc <__mulsf3_pse+0x82>
 806:	86 95       	lsr	r24
 808:	77 95       	ror	r23
 80a:	67 95       	ror	r22
 80c:	b7 95       	ror	r27
 80e:	f7 95       	ror	r31
 810:	e7 95       	ror	r30
 812:	9f 5f       	subi	r25, 0xFF	; 255
 814:	c1 f7       	brne	.-16     	; 0x806 <__mulsf3_pse+0x8c>
 816:	fe 2b       	or	r31, r30
 818:	88 0f       	add	r24, r24
 81a:	91 1d       	adc	r25, r1
 81c:	96 95       	lsr	r25
 81e:	87 95       	ror	r24
 820:	97 f9       	bld	r25, 7
 822:	08 95       	ret

00000824 <__fp_inf>:
 824:	97 f9       	bld	r25, 7
 826:	9f 67       	ori	r25, 0x7F	; 127
 828:	80 e8       	ldi	r24, 0x80	; 128
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	08 95       	ret

00000830 <__fp_nan>:
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	80 ec       	ldi	r24, 0xC0	; 192
 834:	08 95       	ret

00000836 <__fp_pscA>:
 836:	00 24       	eor	r0, r0
 838:	0a 94       	dec	r0
 83a:	16 16       	cp	r1, r22
 83c:	17 06       	cpc	r1, r23
 83e:	18 06       	cpc	r1, r24
 840:	09 06       	cpc	r0, r25
 842:	08 95       	ret

00000844 <__fp_pscB>:
 844:	00 24       	eor	r0, r0
 846:	0a 94       	dec	r0
 848:	12 16       	cp	r1, r18
 84a:	13 06       	cpc	r1, r19
 84c:	14 06       	cpc	r1, r20
 84e:	05 06       	cpc	r0, r21
 850:	08 95       	ret

00000852 <__fp_round>:
 852:	09 2e       	mov	r0, r25
 854:	03 94       	inc	r0
 856:	00 0c       	add	r0, r0
 858:	11 f4       	brne	.+4      	; 0x85e <__fp_round+0xc>
 85a:	88 23       	and	r24, r24
 85c:	52 f0       	brmi	.+20     	; 0x872 <__stack+0x13>
 85e:	bb 0f       	add	r27, r27
 860:	40 f4       	brcc	.+16     	; 0x872 <__stack+0x13>
 862:	bf 2b       	or	r27, r31
 864:	11 f4       	brne	.+4      	; 0x86a <__stack+0xb>
 866:	60 ff       	sbrs	r22, 0
 868:	04 c0       	rjmp	.+8      	; 0x872 <__stack+0x13>
 86a:	6f 5f       	subi	r22, 0xFF	; 255
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <_exit>:
 874:	f8 94       	cli

00000876 <__stop_program>:
 876:	ff cf       	rjmp	.-2      	; 0x876 <__stop_program>
