
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000021  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015d  00000000  00000000  000001d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f6  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ca  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b3  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a0  00000000  00000000  000006db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 88 00 	call	0x110	; 0x110 <main>
  64:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <b>:
#include<avr/io.h>
#include<util/delay.h>

void b(position)
{
	if (position==1)PORTB= 0b11100001;
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	91 05       	cpc	r25, r1
  70:	11 f4       	brne	.+4      	; 0x76 <b+0xa>
  72:	81 ee       	ldi	r24, 0xE1	; 225
  74:	4b c0       	rjmp	.+150    	; 0x10c <b+0xa0>
	
	else if(position==2)PORTB= 0b11010001;
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	91 05       	cpc	r25, r1
  7a:	11 f4       	brne	.+4      	; 0x80 <b+0x14>
  7c:	81 ed       	ldi	r24, 0xD1	; 209
  7e:	46 c0       	rjmp	.+140    	; 0x10c <b+0xa0>
	else if(position==3)PORTB= 0b10110001;
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	91 05       	cpc	r25, r1
  84:	11 f4       	brne	.+4      	; 0x8a <b+0x1e>
  86:	81 eb       	ldi	r24, 0xB1	; 177
  88:	41 c0       	rjmp	.+130    	; 0x10c <b+0xa0>
	
	else if(position==4)PORTB= 0b01110001;
  8a:	84 30       	cpi	r24, 0x04	; 4
  8c:	91 05       	cpc	r25, r1
  8e:	11 f4       	brne	.+4      	; 0x94 <b+0x28>
  90:	81 e7       	ldi	r24, 0x71	; 113
  92:	3c c0       	rjmp	.+120    	; 0x10c <b+0xa0>
	else if(position==5)PORTB= 0b11100010;
  94:	85 30       	cpi	r24, 0x05	; 5
  96:	91 05       	cpc	r25, r1
  98:	11 f4       	brne	.+4      	; 0x9e <b+0x32>
  9a:	82 ee       	ldi	r24, 0xE2	; 226
  9c:	37 c0       	rjmp	.+110    	; 0x10c <b+0xa0>
	
	else if(position==6)PORTB= 0b11010010;	
  9e:	86 30       	cpi	r24, 0x06	; 6
  a0:	91 05       	cpc	r25, r1
  a2:	11 f4       	brne	.+4      	; 0xa8 <b+0x3c>
  a4:	82 ed       	ldi	r24, 0xD2	; 210
  a6:	32 c0       	rjmp	.+100    	; 0x10c <b+0xa0>
	else if(position==7)PORTB= 0b10110010;
  a8:	87 30       	cpi	r24, 0x07	; 7
  aa:	91 05       	cpc	r25, r1
  ac:	11 f4       	brne	.+4      	; 0xb2 <b+0x46>
  ae:	82 eb       	ldi	r24, 0xB2	; 178
  b0:	2d c0       	rjmp	.+90     	; 0x10c <b+0xa0>
	
	else if(position==8)PORTB= 0b01110010;
  b2:	88 30       	cpi	r24, 0x08	; 8
  b4:	91 05       	cpc	r25, r1
  b6:	11 f4       	brne	.+4      	; 0xbc <b+0x50>
  b8:	82 e7       	ldi	r24, 0x72	; 114
  ba:	28 c0       	rjmp	.+80     	; 0x10c <b+0xa0>
	else if(position==9)PORTB= 0b11100100;
  bc:	89 30       	cpi	r24, 0x09	; 9
  be:	91 05       	cpc	r25, r1
  c0:	11 f4       	brne	.+4      	; 0xc6 <b+0x5a>
  c2:	84 ee       	ldi	r24, 0xE4	; 228
  c4:	23 c0       	rjmp	.+70     	; 0x10c <b+0xa0>
	else if(position==10)PORTB= 0b11010100;
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	91 05       	cpc	r25, r1
  ca:	11 f4       	brne	.+4      	; 0xd0 <b+0x64>
  cc:	84 ed       	ldi	r24, 0xD4	; 212
  ce:	1e c0       	rjmp	.+60     	; 0x10c <b+0xa0>
	
	else if(position==11)PORTB= 0b10110100;
  d0:	8b 30       	cpi	r24, 0x0B	; 11
  d2:	91 05       	cpc	r25, r1
  d4:	11 f4       	brne	.+4      	; 0xda <b+0x6e>
  d6:	84 eb       	ldi	r24, 0xB4	; 180
  d8:	19 c0       	rjmp	.+50     	; 0x10c <b+0xa0>
	else if(position==12)PORTB= 0b01110100;
  da:	8c 30       	cpi	r24, 0x0C	; 12
  dc:	91 05       	cpc	r25, r1
  de:	11 f4       	brne	.+4      	; 0xe4 <b+0x78>
  e0:	84 e7       	ldi	r24, 0x74	; 116
  e2:	14 c0       	rjmp	.+40     	; 0x10c <b+0xa0>
	else if(position==13)PORTB= 0b11101000;
  e4:	8d 30       	cpi	r24, 0x0D	; 13
  e6:	91 05       	cpc	r25, r1
  e8:	11 f4       	brne	.+4      	; 0xee <b+0x82>
  ea:	88 ee       	ldi	r24, 0xE8	; 232
  ec:	0f c0       	rjmp	.+30     	; 0x10c <b+0xa0>
	else if(position==14)PORTB= 0b11011000;
  ee:	8e 30       	cpi	r24, 0x0E	; 14
  f0:	91 05       	cpc	r25, r1
  f2:	11 f4       	brne	.+4      	; 0xf8 <b+0x8c>
  f4:	88 ed       	ldi	r24, 0xD8	; 216
  f6:	0a c0       	rjmp	.+20     	; 0x10c <b+0xa0>
	else if(position==15)PORTB= 0b10111000;
  f8:	8f 30       	cpi	r24, 0x0F	; 15
  fa:	91 05       	cpc	r25, r1
  fc:	11 f4       	brne	.+4      	; 0x102 <b+0x96>
  fe:	88 eb       	ldi	r24, 0xB8	; 184
 100:	05 c0       	rjmp	.+10     	; 0x10c <b+0xa0>
	else if(position==16)PORTB= 0b01111000;
 102:	40 97       	sbiw	r24, 0x10	; 16
 104:	11 f4       	brne	.+4      	; 0x10a <b+0x9e>
 106:	88 e7       	ldi	r24, 0x78	; 120
 108:	01 c0       	rjmp	.+2      	; 0x10c <b+0xa0>
	else PORTB=0b11110000;
 10a:	80 ef       	ldi	r24, 0xF0	; 240
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	08 95       	ret

00000110 <main>:
}


int main(void)
{
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	DDRB= 0b11111111;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 120:	08 ec       	ldi	r16, 0xC8	; 200
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	06 c0       	rjmp	.+12     	; 0x132 <main+0x22>
 126:	f8 01       	movw	r30, r16
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12e:	d9 f7       	brne	.-10     	; 0x126 <main+0x16>
 130:	ce 01       	movw	r24, r28
	int i,j,k;
	while(1){
		for(i=0;i<=15;i++){
			for(k=1;k<=1000000000;k++){
			for(j=i;j<=i+1;i++){
 132:	ec 01       	movw	r28, r24
 134:	21 96       	adiw	r28, 0x01	; 1
			b(i);
 136:	0e 94 36 00 	call	0x6c	; 0x6c <b>
 13a:	84 ef       	ldi	r24, 0xF4	; 244
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	f3 cf       	rjmp	.-26     	; 0x126 <main+0x16>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
