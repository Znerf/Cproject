
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000021  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000016d  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000101  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002b7  00000000  00000000  00000535  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b3  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000158  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 88 00 	call	0x110	; 0x110 <main>
  64:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <b>:
#include<avr/io.h>
#include<util/delay.h>

void b(position)
{
	if (position==1)PORTB= 0b11100001;
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	91 05       	cpc	r25, r1
  70:	11 f4       	brne	.+4      	; 0x76 <b+0xa>
  72:	81 ee       	ldi	r24, 0xE1	; 225
  74:	4b c0       	rjmp	.+150    	; 0x10c <b+0xa0>
	
	else if(position==2)PORTB= 0b11010001;
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	91 05       	cpc	r25, r1
  7a:	11 f4       	brne	.+4      	; 0x80 <b+0x14>
  7c:	81 ed       	ldi	r24, 0xD1	; 209
  7e:	46 c0       	rjmp	.+140    	; 0x10c <b+0xa0>
	else if(position==3)PORTB= 0b10110001;
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	91 05       	cpc	r25, r1
  84:	11 f4       	brne	.+4      	; 0x8a <b+0x1e>
  86:	81 eb       	ldi	r24, 0xB1	; 177
  88:	41 c0       	rjmp	.+130    	; 0x10c <b+0xa0>
	
	else if(position==4)PORTB= 0b01110001;
  8a:	84 30       	cpi	r24, 0x04	; 4
  8c:	91 05       	cpc	r25, r1
  8e:	11 f4       	brne	.+4      	; 0x94 <b+0x28>
  90:	81 e7       	ldi	r24, 0x71	; 113
  92:	3c c0       	rjmp	.+120    	; 0x10c <b+0xa0>
	else if(position==5)PORTB= 0b11100010;
  94:	85 30       	cpi	r24, 0x05	; 5
  96:	91 05       	cpc	r25, r1
  98:	11 f4       	brne	.+4      	; 0x9e <b+0x32>
  9a:	82 ee       	ldi	r24, 0xE2	; 226
  9c:	37 c0       	rjmp	.+110    	; 0x10c <b+0xa0>
	
	else if(position==6)PORTB= 0b11010010;	
  9e:	86 30       	cpi	r24, 0x06	; 6
  a0:	91 05       	cpc	r25, r1
  a2:	11 f4       	brne	.+4      	; 0xa8 <b+0x3c>
  a4:	82 ed       	ldi	r24, 0xD2	; 210
  a6:	32 c0       	rjmp	.+100    	; 0x10c <b+0xa0>
	else if(position==7)PORTB= 0b10110010;
  a8:	87 30       	cpi	r24, 0x07	; 7
  aa:	91 05       	cpc	r25, r1
  ac:	11 f4       	brne	.+4      	; 0xb2 <b+0x46>
  ae:	82 eb       	ldi	r24, 0xB2	; 178
  b0:	2d c0       	rjmp	.+90     	; 0x10c <b+0xa0>
	
	else if(position==8)PORTB= 0b01110010;
  b2:	88 30       	cpi	r24, 0x08	; 8
  b4:	91 05       	cpc	r25, r1
  b6:	11 f4       	brne	.+4      	; 0xbc <b+0x50>
  b8:	82 e7       	ldi	r24, 0x72	; 114
  ba:	28 c0       	rjmp	.+80     	; 0x10c <b+0xa0>
	else if(position==9)PORTB= 0b11100100;
  bc:	89 30       	cpi	r24, 0x09	; 9
  be:	91 05       	cpc	r25, r1
  c0:	11 f4       	brne	.+4      	; 0xc6 <b+0x5a>
  c2:	84 ee       	ldi	r24, 0xE4	; 228
  c4:	23 c0       	rjmp	.+70     	; 0x10c <b+0xa0>
	else if(position==10)PORTB= 0b11010100;
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	91 05       	cpc	r25, r1
  ca:	11 f4       	brne	.+4      	; 0xd0 <b+0x64>
  cc:	84 ed       	ldi	r24, 0xD4	; 212
  ce:	1e c0       	rjmp	.+60     	; 0x10c <b+0xa0>
	
	else if(position==11)PORTB= 0b10110100;
  d0:	8b 30       	cpi	r24, 0x0B	; 11
  d2:	91 05       	cpc	r25, r1
  d4:	11 f4       	brne	.+4      	; 0xda <b+0x6e>
  d6:	84 eb       	ldi	r24, 0xB4	; 180
  d8:	19 c0       	rjmp	.+50     	; 0x10c <b+0xa0>
	else if(position==12)PORTB= 0b01110100;
  da:	8c 30       	cpi	r24, 0x0C	; 12
  dc:	91 05       	cpc	r25, r1
  de:	11 f4       	brne	.+4      	; 0xe4 <b+0x78>
  e0:	84 e7       	ldi	r24, 0x74	; 116
  e2:	14 c0       	rjmp	.+40     	; 0x10c <b+0xa0>
	else if(position==13)PORTB= 0b11101000;
  e4:	8d 30       	cpi	r24, 0x0D	; 13
  e6:	91 05       	cpc	r25, r1
  e8:	11 f4       	brne	.+4      	; 0xee <b+0x82>
  ea:	88 ee       	ldi	r24, 0xE8	; 232
  ec:	0f c0       	rjmp	.+30     	; 0x10c <b+0xa0>
	else if(position==14)PORTB= 0b11011000;
  ee:	8e 30       	cpi	r24, 0x0E	; 14
  f0:	91 05       	cpc	r25, r1
  f2:	11 f4       	brne	.+4      	; 0xf8 <b+0x8c>
  f4:	88 ed       	ldi	r24, 0xD8	; 216
  f6:	0a c0       	rjmp	.+20     	; 0x10c <b+0xa0>
	else if(position==15)PORTB= 0b10111000;
  f8:	8f 30       	cpi	r24, 0x0F	; 15
  fa:	91 05       	cpc	r25, r1
  fc:	11 f4       	brne	.+4      	; 0x102 <b+0x96>
  fe:	88 eb       	ldi	r24, 0xB8	; 184
 100:	05 c0       	rjmp	.+10     	; 0x10c <b+0xa0>
	else if(position==16)PORTB= 0b01111000;
 102:	40 97       	sbiw	r24, 0x10	; 16
 104:	11 f4       	brne	.+4      	; 0x10a <b+0x9e>
 106:	88 e7       	ldi	r24, 0x78	; 120
 108:	01 c0       	rjmp	.+2      	; 0x10c <b+0xa0>
	else PORTB=0b11110000;
 10a:	80 ef       	ldi	r24, 0xF0	; 240
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	08 95       	ret

00000110 <main>:
}

	
int main(void)
{
 110:	cf 92       	push	r12
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
	DDRB = 0b11111111;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	87 bb       	out	0x17, r24	; 23
	b(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 36 00 	call	0x6c	; 0x6c <b>
	DDRD &= ~(0b00001111);
 12c:	81 b3       	in	r24, 0x11	; 17
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	81 bb       	out	0x11, r24	; 17
	PORTD=0b00001111;
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	82 bb       	out	0x12, r24	; 18
	
	
	int a=3,position=5,i,n=2;
	//unsigned char random;
	b(position);
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 36 00 	call	0x6c	; 0x6c <b>
 13e:	03 e0       	ldi	r16, 0x03	; 3
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	c5 e0       	ldi	r28, 0x05	; 5
 144:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 146:	98 ec       	ldi	r25, 0xC8	; 200
 148:	c9 2e       	mov	r12, r25
 14a:	d1 2c       	mov	r13, r1
	while(1){
		//ramdom++
		
		if(bit_is_clear(PIND,0)){
 14c:	80 99       	sbic	0x10, 0	; 16
 14e:	06 c0       	rjmp	.+12     	; 0x15c <main+0x4c>
			if (a!=2) a=0;
 150:	02 30       	cpi	r16, 0x02	; 2
 152:	11 05       	cpc	r17, r1
 154:	29 f1       	breq	.+74     	; 0x1a0 <main+0x90>
 156:	00 e0       	ldi	r16, 0x00	; 0
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	1a c0       	rjmp	.+52     	; 0x190 <main+0x80>
		}else if(bit_is_clear(PIND,1)){
 15c:	81 99       	sbic	0x10, 1	; 16
 15e:	06 c0       	rjmp	.+12     	; 0x16c <main+0x5c>
			if (a!=1)a=1;
 160:	01 30       	cpi	r16, 0x01	; 1
 162:	11 05       	cpc	r17, r1
 164:	01 f1       	breq	.+64     	; 0x1a6 <main+0x96>
 166:	01 e0       	ldi	r16, 0x01	; 1
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	1a c0       	rjmp	.+52     	; 0x1a0 <main+0x90>
		}else if(bit_is_clear(PIND,2)){
 16c:	82 99       	sbic	0x10, 2	; 16
 16e:	06 c0       	rjmp	.+12     	; 0x17c <main+0x6c>
			if (a!=3)a=2;
 170:	03 30       	cpi	r16, 0x03	; 3
 172:	11 05       	cpc	r17, r1
 174:	b9 f1       	breq	.+110    	; 0x1e4 <main+0xd4>
 176:	02 e0       	ldi	r16, 0x02	; 2
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	12 c0       	rjmp	.+36     	; 0x1a0 <main+0x90>
		}else if(bit_is_clear(PIND,3)){
 17c:	83 99       	sbic	0x10, 3	; 16
 17e:	05 c0       	rjmp	.+10     	; 0x18a <main+0x7a>
			if (a!=2)a=3;
 180:	02 30       	cpi	r16, 0x02	; 2
 182:	11 05       	cpc	r17, r1
 184:	09 f0       	breq	.+2      	; 0x188 <main+0x78>
 186:	50 c0       	rjmp	.+160    	; 0x228 <main+0x118>
 188:	1b c0       	rjmp	.+54     	; 0x1c0 <main+0xb0>
		}
		
		if (a==0)
 18a:	01 15       	cp	r16, r1
 18c:	11 05       	cpc	r17, r1
 18e:	41 f4       	brne	.+16     	; 0x1a0 <main+0x90>
		{	if (position==1||position==2||position==3||position==4)
 190:	ce 01       	movw	r24, r28
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	04 97       	sbiw	r24, 0x04	; 4
 196:	10 f4       	brcc	.+4      	; 0x19c <main+0x8c>
			{
				position+=12;
 198:	2c 96       	adiw	r28, 0x0c	; 12
 19a:	2c c0       	rjmp	.+88     	; 0x1f4 <main+0xe4>
			
			}else{
			position-=4;
 19c:	24 97       	sbiw	r28, 0x04	; 4
 19e:	2a c0       	rjmp	.+84     	; 0x1f4 <main+0xe4>
			}
			
		}else if(a==1)
 1a0:	01 30       	cpi	r16, 0x01	; 1
 1a2:	11 05       	cpc	r17, r1
 1a4:	51 f4       	brne	.+20     	; 0x1ba <main+0xaa>
		{
			if (position==13||position==14||position==15||position==16)
 1a6:	ce 01       	movw	r24, r28
 1a8:	0d 97       	sbiw	r24, 0x0d	; 13
 1aa:	04 97       	sbiw	r24, 0x04	; 4
 1ac:	10 f4       	brcc	.+4      	; 0x1b2 <main+0xa2>
			{
				position-=12;
 1ae:	2c 97       	sbiw	r28, 0x0c	; 12
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <main+0xa4>
			
			}else{
				position+=4;
 1b2:	24 96       	adiw	r28, 0x04	; 4
 1b4:	01 e0       	ldi	r16, 0x01	; 1
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	1d c0       	rjmp	.+58     	; 0x1f4 <main+0xe4>
			}
		}else if(a==2)
 1ba:	02 30       	cpi	r16, 0x02	; 2
 1bc:	11 05       	cpc	r17, r1
 1be:	91 f4       	brne	.+36     	; 0x1e4 <main+0xd4>
		{
			if (position==1||position==5||position==9||position==13)
 1c0:	c1 30       	cpi	r28, 0x01	; 1
 1c2:	d1 05       	cpc	r29, r1
 1c4:	49 f0       	breq	.+18     	; 0x1d8 <main+0xc8>
 1c6:	c5 30       	cpi	r28, 0x05	; 5
 1c8:	d1 05       	cpc	r29, r1
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <main+0xc8>
 1cc:	c9 30       	cpi	r28, 0x09	; 9
 1ce:	d1 05       	cpc	r29, r1
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <main+0xc8>
 1d2:	cd 30       	cpi	r28, 0x0D	; 13
 1d4:	d1 05       	cpc	r29, r1
 1d6:	11 f4       	brne	.+4      	; 0x1dc <main+0xcc>
			{
				position+=3;
 1d8:	23 96       	adiw	r28, 0x03	; 3
 1da:	01 c0       	rjmp	.+2      	; 0x1de <main+0xce>
			
			}else{
				position-=1;
 1dc:	21 97       	sbiw	r28, 0x01	; 1
 1de:	02 e0       	ldi	r16, 0x02	; 2
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <main+0xe4>
			}
		}else if(a==3)
		{
			if (position%4==0)
 1e4:	ce 01       	movw	r24, r28
 1e6:	83 70       	andi	r24, 0x03	; 3
 1e8:	90 70       	andi	r25, 0x00	; 0
 1ea:	89 2b       	or	r24, r25
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <main+0xe2>
			{
				position-=3;
 1ee:	23 97       	sbiw	r28, 0x03	; 3
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <main+0xe4>
			
			}else{
				position+=1;
 1f2:	21 96       	adiw	r28, 0x01	; 1
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	e8 2e       	mov	r14, r24
 1f8:	f1 2c       	mov	r15, r1
			}
		}
		
		for (i=1;i<=20;i+=20/n)
		{
			b(0);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 36 00 	call	0x6c	; 0x6c <b>
			b(position);
 202:	ce 01       	movw	r24, r28
 204:	0e 94 36 00 	call	0x6c	; 0x6c <b>
 208:	88 e8       	ldi	r24, 0x88	; 136
 20a:	93 e1       	ldi	r25, 0x13	; 19
 20c:	f6 01       	movw	r30, r12
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0xfe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 212:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 214:	d9 f7       	brne	.-10     	; 0x20c <main+0xfc>
			}else{
				position+=1;
			}
		}
		
		for (i=1;i<=20;i+=20/n)
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	e8 0e       	add	r14, r24
 21c:	f9 1e       	adc	r15, r25
 21e:	95 e1       	ldi	r25, 0x15	; 21
 220:	e9 16       	cp	r14, r25
 222:	f1 04       	cpc	r15, r1
 224:	51 f7       	brne	.-44     	; 0x1fa <main+0xea>
 226:	92 cf       	rjmp	.-220    	; 0x14c <main+0x3c>
 228:	03 e0       	ldi	r16, 0x03	; 3
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	b9 cf       	rjmp	.-142    	; 0x1a0 <main+0x90>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
